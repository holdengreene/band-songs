// All da colors
$main-splash-color: #5cdb95;
$cream-color: #edf5e1;
$dark-heading: #05386B;
$strange-pink: #ff4560;
$border-dark: #d1d2d4;
$border-light: #e4e4e5;
$almost-black: #231f20;
$off-white: #f9f9f9;

// All da fonts
$body-font: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,
  'Helvetica Neue', Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji',
  'Segoe UI Symbol';
$title-font: 'Archer-medium', Arial, sans-serif;
$ag-font: 'ag-book', Arial, sans-serif;

@mixin ag-font($font: 'regular') {
  @if ($font == 'light') {
    font-family: $ag-font;
    font-weight: 100;
  }

  @if ($font == 'regular') {
    font-family: $ag-font;
    font-weight: 400;
  }

  @if ($font == 'medium') {
    font-family: $ag-font;
    font-weight: 700;
  }

  @if ($font == 'bold') {
    font-family: $ag-font;
    font-weight: 900;
  }
}

// Breakpoints
$laptop-break: 80em; // 1280px
$main-break: 63.9375em; // 1023px
$middle-break: 62em; // 992px
$mobile-break: 48em; // 768px
$smaller-break: 37.5em; // 600px
$real-small: 30em; // 480px

// All da sizes

$rem-baseline: 16px;
$rem-fallback: false;
$rem-px-only: false;

@function rem-separator($list, $separator: false) {
  @if $separator == 'comma' or $separator == 'space' {
    @return append($list, null, $separator);
  }

  @if function-exists('list-separator') == true {
    @return list-separator($list);
  }

  // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)
  $test-list: ();
  @each $item in $list {
    $test-list: append($test-list, $item, space);
  }

  @return if($test-list == $list, space, comma);
}

@mixin rem-baseline($zoom: 100%) {
  font-size: $zoom / 16px * $rem-baseline;
}

@function rem-convert($to, $values...) {
  $result: ();
  $separator: rem-separator($values);

  @each $value in $values {
    @if type-of($value) == 'number' and unit($value) == 'rem' and $to == 'px' {
      $result: append($result, $value / 1rem * $rem-baseline, $separator);
    } @else if
      type-of($value) ==
      'number' and
      unit($value) ==
      'px' and
      $to ==
      'rem'
    {
      $result: append($result, $value / $rem-baseline * 1rem, $separator);
    } @else if type-of($value) == 'list' {
      $value-separator: rem-separator($value);
      $value: rem-convert($to, $value...);
      $value: rem-separator($value, $value-separator);
      $result: append($result, $value, $separator);
    } @else {
      $result: append($result, $value, $separator);
    }
  }

  @return if(length($result) == 1, nth($result, 1), $result);
}

@function rem($values...) {
  @if $rem-px-only {
    @return rem-convert(px, $values...);
  } @else {
    @return rem-convert(rem, $values...);
  }
}

@mixin rem($properties, $values...) {
  @if type-of($properties) == 'map' {
    @each $property in map-keys($properties) {
      @include rem($property, map-get($properties, $property));
    }
  } @else {
    @each $property in $properties {
      @if $rem-fallback or $rem-px-only {
        #{$property}: rem-convert(px, $values...);
      }
      @if not $rem-px-only {
        #{$property}: rem-convert(rem, $values...);
      }
    }
  }
}
